#+TITLE: Emacs Configuration
#+AUTHOR: Pedro Avalos
#+DESCRIPTION: My literate Emacs configuration

** Customization Variables

Move customization variables to a separate file. Keeps ~init.el~ nice and clean.

#+BEGIN_SRC emacs-lisp
  (setq custom-file "~/.emacs.d/custom.el")
#+END_SRC

** Package Management

*** Package Sources

These are the sources for the package manager.

#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)
  (unless package-archive-contents
    (package-refresh-contents))
#+END_SRC

*** Package Manager

Emacs has a package manager, but ~use-package~ has some nice-to-haves like
auto-installing new packages.

#+BEGIN_SRC emacs-lisp
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t)
#+END_SRC

** Startup Performance

#+BEGIN_SRC emacs-lisp
  ;; Garbage magic hack
  (use-package gcmh
    :config
    (gcmh-mode 1))

  ;; Setting garbage collection threshold
  (setq gc-cons-threshold 402653184
        gc-cons-percentage 0.6)

  (add-hook 'emacs-startup-hook
            (lambda ()
              (message "*** Emacs loaded in %s with %d garbage collections."
                       (format "%.2f seconds"
                               (float-time
                                (time-subtract after-init-time before-init-time)))
                       gcs-done)))

  ;; Silence compiler warnings
  (if (boundp 'comp-deferred-compilation)
      (setq comp-deferred-compilation nil)
    (setq native-comp-deferred-compilation nil))

  ;; In noninteractive sessions, prioritize non-byte-compiled source files to
  ;; prevent the use of stale byte-code. Otherwise, it saves us a little IO
  ;; time to skip the time checks on every *.elc file.
  (setq load-prefer-newer noninteractive)
#+END_SRC


** Keep Emacs Tidy

I dislike the Emacs clutter in my directories. This swipes the clutter neatly
under the rug...

#+BEGIN_SRC emacs-lisp
  ;; Move everything out of the ~/.emacs.d folder
  (setq user-emacs-directory "~/.cache/emacs")

  (use-package no-littering)

  ;; Place auto save files into the same path as it uses for sessions
  (setq auto-save-file-name-transforms
        `((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC

** User Interface

*** Disable Unnecessary Elements

I find the following UI elements unnecessary, so I disable them.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t) ; Don't show startup message

  (menu-bar-mode -1)   ; Disable visible scroll bar
  (tool-bar-mode -1)   ; Disable the toolbar
  (tooltip-mode -1)    ; Disable tooltips
  (set-fringe-mode 10) ; Some extra space on the gutter/fringe
  (scroll-bar-mode -1) ; Disable menu bar
#+END_SRC

*** Eighty Column Rule

Lines longer than 80 characters are yucky...

For further reading, see:

+ [[https://www.ibm.com/docs/en/zos/2.3.0?topic=statements-general-rules-coding][General rules for coding statements (IBM)]]
+ [[https://www.emacswiki.org/emacs/EightyColumnRule][Eighty Column Rule (EmacsWiki)]]

#+BEGIN_SRC emacs-lisp
  (setq-default display-fill-column-indicator-column 79)
  (global-display-fill-column-indicator-mode 1)
#+END_SRC

*** Column and Line Numbers

#+BEGIN_SRC emacs-lisp
  (column-number-mode)                 ; Show column numbers
  (global-display-line-numbers-mode 1) ; Show line numbers

  (global-visual-line-mode t) ; Word wrap

  ;; Don't show line numbers in these modes
  (dolist (mode '(org-mode-hook
                  term-mode-hook
                  shell-mode-hook
                  eshell-mode-hook))
    (add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

*** Theme

I like the [[https://catppuccin.com/][catppuccin]] color scheme.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (load-theme 'catppuccin t)
  (setq catppuccin-flavor 'mocha)
  (catppuccin-reload)
#+END_SRC

*** Modeline

I like using [[https://github.com/seagle0128/doom-modeline][doom-modeline]] (a fancy and fast mode-line). I also install icons to
make it more visually pleasing. You will need to install the icons fonts
with: ~M-x all-the-icons-install-fonts~.

#+BEGIN_SRC emacs-lisp
  (use-package all-the-icons
    :if (display-graphic-p))
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+END_SRC

*** Dashboard

I like a nice and pretty startup screen.

#+BEGIN_SRC emacs-lisp
  ;; Install and enable the dashboard
  (use-package dashboard
    :config
    (dashboard-setup-startup-hook))

  ;; Use all-the-icons font
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)

  (setq dashboard-set-navigator t) ; Show navigator below the banner
  (setq dashboard-set-init-info t) ; Show info about the packages and init time
#+END_SRC

** Keybindings

I prefer vim keybindings, sorry not sorry.

#+BEGIN_SRC emacs-lisp
  ;; Set up evil mode
  (use-package evil
    :init ;; Tweak evil before loading it
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode t))

  ;; Add evil keybindings to more modes
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  ;; Use evil keybindings
  (use-package general
    :config
    (general-evil-setup t))

  ;; Evil mode tutorial
  (use-package evil-tutor)
#+END_SRC

** Other Settings

#+BEGIN_SRC emacs-lisp
  ;; Use spaces, not tabs
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq indent-line-function 'insert-tab)
#+END_SRC
