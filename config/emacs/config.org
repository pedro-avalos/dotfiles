#+TITLE: Emacs Configuration
#+AUTHOR: Pedro Avalos
#+DESCRIPTION: My literate Emacs configuration

* Customization Variables

Move customization variables to a separate file. Keeps ~init.el~ nice and clean.

#+BEGIN_SRC emacs-lisp
	(setq custom-file "~/.config/emacs/custom.el")
#+END_SRC

* Package Management

** Package Sources

These are the sources for the package manager.

#+BEGIN_SRC emacs-lisp
	(require 'package)
	(setq package-archives '(("melpa" . "https://melpa.org/packages/")
													 ("org"   . "https://orgmode.org/elpa/")
													 ("elpa"  . "https://elpa.gnu.org/packages/")))

	(package-initialize)
	(unless package-archive-contents
		(package-refresh-contents))
#+END_SRC

** Package Manager

Emacs has a package manager, but ~use-package~ has some nice-to-haves like
auto-installing new packages.

#+BEGIN_SRC emacs-lisp
	;; Install use-package
	(unless (package-installed-p 'use-package)
		(package-install 'use-package))
	(require 'use-package)

	;; Install absent modules
	(setq use-package-always-ensure t)

	;; Auto-update packages
	(use-package auto-package-update
		:config
		(setq auto-package-update-delete-old-versions t)
		(setq auto-package-update-hide-results t)
		(auto-package-update-maybe))
#+END_SRC

* Startup Performance

#+BEGIN_SRC emacs-lisp
	;; Garbage magic hack
	(use-package gcmh
		:config
		(gcmh-mode 1))

	;; Setting garbage collection threshold
	(setq gc-cons-threshold 402653184
				gc-cons-percentage 0.6)

	(add-hook 'emacs-startup-hook
						(lambda ()
							(message "*** Emacs loaded in %s with %d garbage collections."
											 (format "%.2f seconds"
															 (float-time
																(time-subtract after-init-time before-init-time)))
											 gcs-done)))

	;; Silence compiler warnings
	(if (boundp 'comp-deferred-compilation)
			(setq comp-deferred-compilation nil)
		(setq native-comp-deferred-compilation nil))

	;; In noninteractive sessions, prioritize non-byte-compiled source files to
	;; prevent the use of stale byte-code. Otherwise, it saves us a little IO
	;; time to skip the time checks on every *.elc file.
	(setq load-prefer-newer noninteractive)
#+END_SRC


* Keep Emacs Tidy

I dislike the Emacs clutter in my directories. This swipes the clutter neatly
under the rug...

#+BEGIN_SRC emacs-lisp
	;; Move everything out of the ~/.config/emacs folder
	(setq user-emacs-directory "~/.cache/emacs")

	(use-package no-littering)

	;; Place auto save files into the same path as it uses for sessions
	(setq auto-save-file-name-transforms
				`((".*" ,(no-littering-expand-var-file-name "auto-save/") t)))
#+END_SRC

* User Interface

** Fonts

#+BEGIN_SRC emacs-lisp
	(set-face-attribute 'default nil
											:font "monospace"
											:weight 'medium)
	(set-face-attribute 'variable-pitch nil
											:font "monospace"
											:weight 'medium)
	(set-face-attribute 'fixed-pitch nil
											:font "monospace"
											:weight 'medium)

	;; Italicize comments & keywords
	(set-face-attribute 'font-lock-comment-face nil
											:slant 'italic)
	(set-face-attribute 'font-lock-keyword-face nil
											:slant 'italic)

	;; Make certtain keywords symbols
	(global-prettify-symbols-mode t)
#+END_SRC

*** Icons and Emojis

You will need to install the icons fonts with: ~M-x nerd-icons-install-fonts~.

#+BEGIN_SRC emacs-lisp
	;; Icons
	(use-package nerd-icons)

	;; Emojis
	(use-package emojify
		:hook (after-init . global-emojify-mode))
#+END_SRC

** Disable Unnecessary Elements

I find the following UI elements unnecessary, so I disable them.

#+BEGIN_SRC emacs-lisp
	(setq inhibit-startup-message t) ;; Don't show startup message

	(menu-bar-mode -1) ;; Disable visible scroll bar
	(tool-bar-mode -1) ;; Disable the toolbar
	(tooltip-mode -1)  ;; Disable tooltips

	;; These settings can cause issues with emacs-nox
	(when (display-graphic-p)
		(set-fringe-mode 10)  ;; Some extra space on the gutter/fringe
		(scroll-bar-mode -1)) ;; Disable menu bar
#+END_SRC

** Eighty Column Rule

Lines longer than 80 characters are yucky...

For further reading, see:

+ [[https://www.ibm.com/docs/en/zos/2.3.0?topic=statements-general-rules-coding][General rules for coding statements (IBM)]]
+ [[https://www.emacswiki.org/emacs/EightyColumnRule][Eighty Column Rule (EmacsWiki)]]

#+BEGIN_SRC emacs-lisp
	(setq-default display-fill-column-indicator-column 80)
	(global-display-fill-column-indicator-mode 1)
#+END_SRC

** Column and Line Numbers

#+BEGIN_SRC emacs-lisp
	(setq column-number-mode t)
	(global-display-line-numbers-mode t)

	(global-visual-line-mode t) ;; Word wrap

	;; Don't show line numbers in these modes
	(dolist (mode '(org-mode-hook
									term-mode-hook
									shell-mode-hook
									eshell-mode-hook))
		(add-hook mode (lambda () (display-line-numbers-mode 0))))
#+END_SRC

** Theme

#+BEGIN_SRC emacs-lisp
	(use-package doom-themes
		:config
		(setq doom-themes-enable-bold t
					doom-themes-enable-italics t)
		(load-theme 'doom-dark+ t)
		(doom-themes-visual-bell-config)
		(setq doom-themes-treemacs-theme "doom-colors")
		(doom-themes-treemacs-config)
		(doom-themes-org-config))
#+END_SRC

** Tree

#+BEGIN_SRC emacs-lisp
	(use-package treemacs
		:defer t
		:bind
		(:map global-map
					("M-0" . treemacs-select-window)
					("C-x t 1" . treemacs-delete-other-window)
					("C-x t t" . treemacs)
					("C-x t d" . treemacs-select-directory)
					("C-x t B" . treemacs-bookmark)
					("C-x t C-t" . treemacs-find-file)
					("C-x t M-t" . treemacs-find-tag)))

	(use-package treemacs-evil
		:after (treemacs evil))

	(use-package treemacs-icons-dired
		:hook (dired-mode . treemacs-icons-dired-enable-once))
#+END_SRC

** Modeline

I like using [[https://github.com/seagle0128/doom-modeline][doom-modeline]] (a fancy and fast mode-line). I also enable icons.

#+BEGIN_SRC emacs-lisp
	(use-package doom-modeline
		:init (doom-modeline-mode 1))
#+END_SRC

** Dashboard

*** Configuring Dashboard

I like a nice and pretty startup screen.

#+BEGIN_SRC emacs-lisp
	;; Install and enable the dashboard
	(use-package dashboard
		:init
		(setq dashboard-display-icons-p t)        ;; Display icons on GUI and terminal
		(setq dashboard-icon-type 'nerd-icons)    ;; Use nerd-icons
		(setq dashboard-set-heading-icons t)      ;; Add icons to the headings
		(setq dashboard-set-file-icons t)         ;; Add icons to the items
		(setq dashboard-startup-banner 'official) ;; Standard emacs logo
		(setq dashboard-set-navigator t)          ;; Show navigator below the banner
		(setq dashboard-set-init-info t)          ;; Show packages info and init time
		:if (< (length command-line-args) 2)
		:config
		(dashboard-setup-startup-hook))
#+END_SRC

*** Dashboard in Emacsclient

To be able to use dashboard when emacs is daemonized, the following snippet
is required.

#+BEGIN_SRC emacs-lisp
	;; Enable dashboard for emacsclient
	(if (< (length command-line-args) 2)
			(setq initial-buffer-choice (lambda () (get-buffer-create "*dashboard*"))))
#+END_SRC

* Ivy (Counsel/Swiper)

Ivy, counsel, and swiper are generic completion mechanisms. Ivy-rich allows us
to add descriptions alongside the commands in ~M-x~.

** Installation

#+BEGIN_SRC emacs-lisp
	(use-package counsel
		:after ivy
		:config (counsel-mode))

	(use-package ivy
		:defer 0.1
		:diminish
		:bind
		(("C-c C-r" . ivy-resume)
		 ("C-x B" . ivy-switch-buffer-other-window))
		:custom
		(setq ivy-count-format "(%d/%d) ")
		(setq ivy-use-virtual-buffers t)
		(setq enable-recursive-minibuffers t)
		:config
		(ivy-mode))

	(use-package ivy-rich
		:after ivy
		:custom
		(ivy-virtual-abbreviate 'full
														ivy-rich-switch-buffer-align-virtual-buffer t
														ivy-rich-path-style 'abbrev)
		:config
		(ivy-set-display-transformer 'ivy-switch-buffer
																 'ivy-rich-switch-buffer-transformer)
		(ivy-rich-mode 1))

	(use-package swiper
		:after ivy
		:bind (("C-s" . swiper)
					 ("C-r" . swiper)))
#+END_SRC

** Improve Searching

Removes the ~^~ in prompts. The default string means that searches will match
the start of the string. I want to be able to search without knowing the start.

#+BEGIN_SRC emacs-lisp
	(setq ivy-initial-inputs-alist nil)
#+END_SRC

** Search History

The smex package allows ~M-x~ to remember our history.

#+BEGIN_SRC emacs-lisp
	(use-package smex)
	(smex-initialize)
#+END_SRC

** Ivy-posframe

#+BEGIN_SRC emacs-lisp
	(use-package ivy-posframe
		:init
		(setq ivy-posframe-display-functions-alist
					'((swiper . ivy-posframe-display-at-point)
						(complete-symbol . ivy-posframe-display-at-point)
						(counsel-M-x . ivy-display-function-fallback)
						(counsel-esh-history . ivy-posframe-display-at-window-center)
						(counsel-describe-function . ivy-display-funciton-fallback)
						(counsel-describe-variable . ivy-display-function-fallback)
						(counsel-find-file . ivy-display-function-fallback)
						(counsel-recentf . ivy-display-function-fallback)
						(dmenu . ivy-posframe-display-at-fram-top-center)
						(nil . ivy-posframe-display))
					ivy-posframe-height-alist
					'((swiper . 20)
						(dmenu . 20)
						(t . 10)))
		:config
		(ivy-posframe-mode 1 ))
#+END_SRC

* LSP

Language Server Protocol.

#+BEGIN_SRC emacs-lisp
	(use-package lsp-mode
		:init
		;; set prefix for lsp-command-keymap
		(setq lsp-keymap-prefix "C-c l")
		:hook (
					 (python-mode . lsp)
					 (lsp-mode . lsp-enable-which-key-integration))
		:commands lsp)

	(use-package lsp-ui :commands lsp-ui-mode)
	(use-package lsp-ivy :commands lsp-ivy-workspace-symbol)
	(use-package lsp-treemacs :commands lsp-treemacs-errors-list)
	(use-package dap-mode)

	(use-package which-key
		:config
		(which-key-mode))
#+END_SRC

** C/C++

#+BEGIN_SRC emacs-lisp
	(add-hook 'c-mode-hook 'lsp)
	(add-hook 'c++-mode-hook 'lsp)

	(setq gc-cons-threshold (* 100 1024 1024)
				read-process-output-max (* 1024 1024)
				treemacs-space-between-root-nodes nil)
#+END_SRC

* Keybindings

** Evil Mode

I prefer vim keybindings, sorry not sorry.

#+BEGIN_SRC emacs-lisp
	;; Set up evil mode
	(use-package evil
		:init
		(setq evil-want-keybinding nil)
		(setq evil-vsplit-window-right t)
		(setq evil-split-window-below t)
		(evil-mode t))

	;; Add evil keybindings to more modes
	(use-package evil-collection
		:after evil
		:config
		(setq evil-collection-mode-list '(dashboard dired ibuffer))
		(evil-collection-init))

	;; Evil mode tutorial
	(use-package evil-tutor)
#+END_SRC

** General Keybindings

General helps set keybindings. Install it with evil mode.
Use ~SPC~ as the prefix key.

#+BEGIN_SRC emacs-lisp
	(use-package general
		:config
		(general-evil-setup t))

	(nvmap :keymaps 'override :prefix "SPC"
		"SPC" '(counsel-M-x :which-key "M-x")
		"c c" '(compile :which-key "Compile")
		"c C" '(recompile :which-key "Recompile")
		"h r r" '((lambda () (interactive) (load-file "~/.config/emacs/init.el")) :which-key "Reload emacs config")
		"t t" '(toggle-truncate-lines :which-key "Toggle truncate lines"))

	(nvmap :keymaps 'override :prefix "SPC"
		"m *" '(org-ctrl-c-star :which-key "Org-ctrl-c-star")
		"m +" '(org-ctrl-c-minus :which-key "Org-ctrl-c-minus")
		"m ." '(counsel-org-goto :which-key "Counsel org goto")
		"m e" '(org-export-dispatch :which-key "Org export dispatch")
		"m f" '(org-footnote-new :which-key "Org footnote new")
		"m h" '(org-toggle-heading :which-key "Org toggle heading")
		"m i" '(org-toggle-item :which-key "Org toggle item")
		"m n" '(org-store-link :which-key "Org store link")
		"m o" '(org-set-property :which-key "Org set property")
		"m t" '(org-todo :which-key "Org todo")
		"m x" '(org-toggle-checkbox :which-key "Org toggle checkbox")
		"m B" '(org-babel-tangle :which-key "Org babel tangle")
		"m I" '(org-toggle-inline-images :which-key "Org toggle inline images")
		"m T" '(org-todo-list :which-key "Org todo list")
		"o a" '(org-agenda :which-key "Org agenda"))
#+END_SRC

** Buffers and Bookmarks

#+BEGIN_SRC emacs-lisp
	(nvmap :prefix "SPC"
		"b b" '(ibuffer :which-key "Ibuffer")
		"b c" '(clone-indirect-buffer-other-window :which-key "Clone indirect buffer other window")
		"b k" '(kill-current-buffer :which-key "Kill current buffer")
		"b n" '(next-buffer :which-key "Next buffer")
		"b p" '(previous-buffer :which-key "Previous buffer")
		"b B" '(ibuffer-list-buffers :which-key "Ibuffer list buffers")
		"b K" '(kill-buffer :which-key "Kill buffer"))
#+END_SRC

* Modes

These are useful modes that I like to have with emacs.

** Yaml

#+BEGIN_SRC emacs-lisp
	(use-package yaml-mode
		:mode (("\\.yml$" . yaml-mode)
					 ("\\.yaml$" . yaml-mode)))
#+END_SRC

* Other Settings

** Babel

#+BEGIN_SRC emacs-lisp
	(org-babel-do-load-languages
	 'org-babel-load-languages
	 '(
		 (python . t)))
#+END_SRC

** Indentation

I prefer to use a tab width of 2 character.

#+BEGIN_SRC emacs-lisp
	(setq-default indent-tabs-mode t)
	(setq-default tab-width 2)
	(setq indent-line-function 'insert-tab)
	(setq org-src-preserve-indentation nil 
				org-src-tab-acts-natively t)
#+END_SRC
